

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex, normal;
attribute vec2 texCoord;
varying vec2 v_TexCoord;
uniform mat4 ModelViewProjectionMatrix, NormalMatrix;
varying vec3 v_Color;
uniform vec3 lightDir;
uniform vec2 texTr;

uniform float angle;

mat4 translation(vec2 t) {
    mat4 dst;

    dst[0][0] = 1.0;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = 1.0;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = t.x;
    dst[3][ 1] = t.y;
    dst[3][ 2] = 0.0;
    dst[3][ 3] = 1.0;

    return dst;
}

mat4 rotation(float angleInRadians) {
    mat4 dst;
    float c = cos(angleInRadians);
    float s = sin(angleInRadians);

    dst[0][0] = c;
    dst[0][ 1] = s;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = -s;
    dst[1][ 1] = c;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = 0.0;
    dst[3][ 1] = 0.0;
    dst[3][ 2] = 0.0;
    dst[3][ 3] = 1.0;

    return dst;
}

void main() {
    vec4 t = translation(-texTr)*vec4(texCoord,0.0,1.0);
    vec4 r = rotation(angle)*t;
    vec4 tt = translation(texTr)*r;
    v_TexCoord = tt.xy;
    vec3 vertPos = mat3(ModelViewProjectionMatrix)*vertex;
    vec3 norm = normalize(mat3(NormalMatrix)*normal);
    float lambertian = max(dot(norm, lightDir), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-lightDir, norm);      // Reflected light vector
        vec3 V = normalize(-vertPos); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, 10.0);
    }
    vec3 ambientColor = vec3(0.1);
    vec3 diffuseColor = vec3(0.2,1.0,0.8);
    vec3 specularColor = vec3(1.0);
    v_Color = vec3(ambientColor + lambertian * diffuseColor + specular * specularColor);
    //v_Color= norm;
    
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
varying vec3 v_Color;
uniform vec3 lightDir;
uniform sampler2D tmu;
varying vec2 v_TexCoord;
void main() {
    
    gl_FragColor = vec4(v_Color,1.0);
    gl_FragColor = texture2D(tmu,v_TexCoord);
    if(lightDir.z>90.0){
        gl_FragColor = color;
    }
}`;